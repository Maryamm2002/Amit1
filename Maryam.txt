/*
 * GLCD.h
 *
 * Created: 11/15/2023 8:00:10 PM
 *  Author: Maryamm
 */ 


#ifndef GLCD_H_
#define GLCD_H_
#include <avr/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "DIO.h"
#include "BIT_MATH.h"


#define GLCD_DATA_PORT PORTC
#define GLCD_CTRL_PORT PORTD
#define GLCD_DPORT_DIR DDRD
#define GLCD_CPORT_DIR DDRC

#define RS		PC0
#define RW		PC1
#define E		PC2
#define RST		PC3
#define CS1		PC4
#define CS2		PC5

void glcd_cmd(unsigned char cmd);
void glcd_dta(unsigned char dta);
void glcd_PageSelect(char pge);
void glcd_WriteChar(char *chr);
void glcd_SetCursor(uint_8 x, uint_8 y);
void glcd_WriteStr(char pge,char *str);
void glcd_WriteImg(char *pxl);
void displayPWM();
void glcd_int(void);





#endif /* GLCD_H_ */



/*
 * GLCD.c
 *
 * Created: 11/15/2023 9:50:00 PM
 *  Author: Maryamm
 */ 
#include "GLCD.h"
#include "glcd-font.h"
#include "diy_PWM.h"

void glcd_cmd(unsigned char cmd) {
    GLCD_DATA_PORT = cmd;
    CLEAR_BIT(GLCD_CTRL_PORT, RS);
    CLEAR_BIT(GLCD_CTRL_PORT, RW);
    SET_BIT(GLCD_CTRL_PORT, E);
    _delay_ms(1);
    CLEAR_BIT(GLCD_CTRL_PORT, E);
}

void glcd_dta(unsigned char dta) {
    GLCD_DATA_PORT = dta;
    SET_BIT(GLCD_CTRL_PORT, RS);
    CLEAR_BIT(GLCD_CTRL_PORT, RW);
    SET_BIT(GLCD_CTRL_PORT, E);
    _delay_ms(1);
    CLEAR_BIT(GLCD_CTRL_PORT, E);
}

void glcd_PageSelect(char pge) {
    switch (pge) {
	    case 0:
	    CLEAR_BIT(GLCD_CTRL_PORT, CS2);
	    SET_BIT(GLCD_CTRL_PORT, CS1);
	    break;
	    case 1:
	    CLEAR_BIT(GLCD_CTRL_PORT, CS2);
	    SET_BIT(GLCD_CTRL_PORT, CS1);
	    break;
	    case 2:
	    SET_BIT(GLCD_CTRL_PORT, CS2);
	    SET_BIT(GLCD_CTRL_PORT, CS1);
	    break;
	    case 3:
	    CLEAR_BIT(GLCD_CTRL_PORT, CS2);
	    CLEAR_BIT(GLCD_CTRL_PORT, CS1);
	    break;
	    default:
	    CLEAR_BIT(GLCD_CTRL_PORT, CS2);
	    SET_BIT(GLCD_CTRL_PORT, CS1);
	    break;
	}
}
void glcd_SetCursor(uint_8 x, uint_8 y){
	glcd_cmd(0xBB + x);
	glcd_cmd(0x40 + y);
}
void glcd_WriteChar(char *chr){
	uint_8 i;
	glcd_SetCursor(0,0);
	for(i=0;i<5;i++){
		glcd_dta(*(chr+i));
	}
}
void glcd_WriteStr(char pge,char *str){
   unsigned char i = 0;
    char startfont =0,endfont = 0;
    glcd_PageSelect(pge);
    glcd_SetCursor(0,0);
    while(*str)
    {
	    startfont = (*str - 32)*5;
	    endfont   = startfont + 5;
	    for(i=startfont;i<endfont;i++)
	    {
		    glcd_dta(sys5x8[i]);
		    _delay_ms(100);
	    }
	    str++;
    }	
}
void glcd_WriteImg(char *pxl){
	    // Assuming each byte in pxl corresponds to a column of 8 pixels
	    // and the image is displayed row by row.

	    for (uint8_t row = 0; row < 64; row++) {  // Assuming a 64-row display
		    glcd_PageSelect(row / 8);  // Select the appropriate page

		    for (uint8_t col = 0; col < 128; col++) {  // Assuming a 128-column display
			    // Extract the bit corresponding to the current pixel
			    uint8_t pixel = (pxl[row * 128 + col / 8] >> (7 - col % 8)) & 0x01;

			    // Write the pixel to the display
			    glcd_dta(pixel ? 0xFF : 0x00);  // Assuming 0xFF represents an "on" pixel
		    }
	    }
    }

    void displayPWM() {
   uint_8 row, col;

   for (row = 0; row < 64; row++) {
	   // Assuming a 64-row display
	   glcd_PageSelect(row / 8);

	   for (col = 0; col < 128; col++) {
		   // Assuming a 128-column display
		   uint_8 pixel = (PWM[row * 128 + col / 8] >> (7 - col % 8)) & 0x01;
		   // Assuming 0xFF represents an "on" pixel
		   glcd_dta(pixel ? 0xFF : 0x00);
	   }
   }
    }


void glcd_int(void) {
    GLCD_DPORT_DIR = 0xFF;
    GLCD_CPORT_DIR = 0xFF;

    CLEAR_BIT(GLCD_CTRL_PORT, RST);
    _delay_ms(10);
    SET_BIT(GLCD_CTRL_PORT, RST);
    _delay_ms(1);
    glcd_PageSelect(2);
    _delay_ms(1);
    glcd_cmd(0x3F);
    glcd_cmd(0xC0);
    _delay_ms(1);
    glcd_PageSelect(3);
    _delay_ms(1);
}

/*
 * PWM.h
 *
 * Created: 11/16/2023 8:10:20 PM
 *  Author: Maryamm
 */ 


#ifndef PWM_H_
#define PWM_H_

#include <stdint.h>
#include "STD_TYPES.h"
void PWM_init();
uint_16 PWM_getFrequency();
uint_8 PWM_getDutyCycle();



#endif /* PWM_H_ */

/*
 * PWM.c
 *
 * Created: 11/16/2023 10:20:05 PM
 *  Author: Maryamm
 */ 
#include "PWM.h"
#include "Timer.h"
#include <avr/io.h>

#define F_CPU 8000000UL  


void PWM_init() {
         TIMER_cfgstruct pwmConfig;
		 pwmConfig.pre = PRE_64;
		 pwmConfig.mode = Fast_PWM;
		 pwmConfig.Op_mode = Polling;
		 pwmConfig.Timer = Timer1;
		 
		 Timer_Setup(pwmConfig);
		 Timer1_start();
}

uint_16 PWM_getFrequency() {

    // Read the value from ICR1 register to get TOP
    uint_16 topValue = ICR1_REG;

    // Read the value from OCR1A register to get the compare value
    uint_16 compareValue = OCR1A_REG;

    // Read the value of the prescaler
    uint_8 prescalerValue;
    switch (TCCR1B_REG & 0x07) {
	    case 0x01:  // No prescaler
	    prescalerValue = 1;
	    break;
	    case 0x02:
	    prescalerValue = 8;
	    break;
	    case 0x03:
	    prescalerValue = 64;
	    break;
	    case 0x04:
	    prescalerValue = 256;
	    break;
	    case 0x05:
	    prescalerValue = 1024;
	    break;
	    default:
	    prescalerValue = 1;
	    break;
    }

    // Calculate the PWM frequency using the provided formula
    double frequency = ((double)F_CPU / (2.0 * (double)prescalerValue * ((double)topValue + 1.0))) * (1.0 + ((double)compareValue / ((double)topValue + 1.0)));

    return (uint_16)frequency;
}

uint_8 PWM_getDutyCycle() {

	// Read the Compare Output Mode bits in TCCR1A
	uint_8 com1aMode = (TCCR1A_REG >> COM1A0_BIT) & 0x03;

	// Read the values from OCR1A register and ICR1 register
	uint_16 compareValue = OCR1A_REG;
	uint_16 topValue = ICR1_REG;

	// Calculate duty cycle based on the Compare Output Mode
	uint_8 dutyCycle;
	switch (com1aMode) {
		case 0x00:  // Normal port operation, OC1A/OC1B disconnected
		case 0x02:  // For all other WGM13:0 settings
		dutyCycle = 0;  // Assume 0% duty cycle
		break;
		case 0x01:  // WGM13:0 = 15: Toggle OC1A on Compare Match, OC1B disconnected
		// Toggle mode, duty cycle is not meaningful
		dutyCycle = 0;
		break;
		case 0x03:  // Set OC1A on compare match, clear OC1A at TOP
		// Duty cycle is OCR1A / (TOP + 1)
		dutyCycle = (uint8_t)((compareValue * 100) / (topValue + 1));
		break;
		case 0x04:  // Clear OC1A on compare match, set OC1A at TOP
		// Duty cycle is (TOP - OCR1A) / (TOP + 1)
		dutyCycle = (uint8_t)(((topValue - compareValue) * 100) / (topValue + 1));
		break;
		default:
		dutyCycle = 0;  // Assume 0% duty cycle
		break;
	}

	return dutyCycle;
}

/*
 * Timer.c
 *
 * Created: 9/9/2023 3:00:03 PM
 *  Author: Maryamm
 */ 
#include "Timer.h"
static TIMER_cfgstruct Timer_struct;
void Timer_Setup(TIMER_cfgstruct cnfg){
	Timer_struct.mode = cnfg.mode;
	Timer_struct.Op_mode = cnfg.Op_mode;
	Timer_struct.pre = cnfg.pre;
	Timer_struct.Timer = cnfg.Timer;
	if (cnfg.Timer == Timer0)
	{
	if(cnfg.mode == Normal){
		CLEAR_BIT(TCCR0_REG,WGM00_BIT);
		CLEAR_BIT(TCCR0_REG,WGM01_BIT);
	}else if (cnfg.mode == CTC)
	{
		CLEAR_BIT(TCCR0_REG,WGM00_BIT);
		SET_BIT(TCCR0_REG,WGM01_BIT);
	}else if (cnfg.mode == Phase_correct_PWM)
	{
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLEAR_BIT(TCCR0_REG,WGM01_BIT);
		CLEAR_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	}else if (cnfg.mode == Fast_PWM){
		SET_BIT(TCCR0_REG,WGM00_BIT);
		SET_BIT(TCCR0_REG,WGM01_BIT);
		CLEAR_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	}
	/*setting the mode of operation*/
	if (cnfg.Op_mode == Polling)
	{
	}else if (cnfg.Op_mode == Interrupt)
	{
		SET_BIT(SREG_REG,7);
		SET_BIT(TIMSK_REG,TOIE_BIT);
	}
}else if (cnfg.Timer == Timer1)
{
	if(cnfg.mode == Normal){

	}else if (cnfg.mode == CTC)
	{

	}else if (cnfg.mode == Phase_correct_PWM)
	{

		}else if (cnfg.mode == Fast_PWM){
			/*operating in ICR and Non-Inverted*/
			CLEAR_BIT(TCCR1A_REG,WGM10_BIT);
			SET_BIT(TCCR1A_REG,WGM11_BIT);
			SET_BIT(TCCR1B_REG,WGM12_BIT);
			SET_BIT(TCCR1B_REG,WGM13_BIT);
			CLEAR_BIT(TCCR1A_REG,COM1A0_BIT);
			/*Non-Inverted mode*/
			SET_BIT(TCCR1A_REG,COM1A1_BIT);

	}
	/*setting the mode of operation*/
	if (cnfg.Op_mode == Polling)
	{
	}else if (cnfg.Op_mode == Interrupt)
	{

	}
}
	}
void Timer_Start(void){
	TCCR0_REG &= 0xf8;
	TCCR0_REG |= Timer_struct.pre;
}
void Timer1_start(void){
	ICR1_REG = 40000;
	TCCR1B_REG |= Timer_struct.pre;
}
void Timer1_stop(void){
	TCCR1B_REG &= 0xf8;
}
void Timer_Stop(void){
	TCCR0_REG &= 0xf8;
	
}

/*
 * Amit_Projec1interface.c
 *
 * Created: 8/18/2023 4:50:10 PM
 * Author : Maryamm
 */ 
#define F_CPU 16000000ul
#include <avr/io.h>
#include "PWM.h"
#include "GLCD.h"
#include <util/delay.h>
#include <avr/interrupt.h>


int main (void){
	
    // Initialize GLCD
	glcd_int();

    // Initialize PWM	
	PWM_init();
	
    // Initialize PWM
    PWM_init();


	
	while (1){

    // Display PWM waveform on GLCD
    displayPWM();

    // Get PWM frequency and duty cycle
    uint_16 frequency = PWM_getFrequency();
    uint_8 dutyCycle = PWM_getDutyCycle();

    char freqStr[10];
    char dutyStr[10];
    itoa(frequency, freqStr, 10);
    itoa(dutyCycle, dutyStr, 10);

    glcd_PageSelect(2);
    glcd_SetCursor(0, 0);
    glcd_WriteStr(2, "PWM Frequency: ");
    glcd_WriteStr(2, freqStr);

    glcd_PageSelect(3);
    glcd_SetCursor(0, 0);
    glcd_WriteStr(3, "PWM Duty Cycle: ");
    glcd_WriteStr(3, dutyStr);	
		_delay_ms(1000);
	}
	return 0;
}
 
